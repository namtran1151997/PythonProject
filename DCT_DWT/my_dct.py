import numpy as np

pi = 3.142857
m = 8
n = 8


def dct_transform(matrix):
    mdct = [
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ]

    for i in range(0, m):
        for j in range(0, n):
            if i == 0:
                ci = 1 / np.sqrt(m)
            else:
                ci = np.sqrt(2) / np.sqrt(m)
            if j == 0:
                cj = 1 / np.sqrt(n)
            else:
                cj = np.sqrt(2) / np.sqrt(n)
            s = 0

            for k in range(0, m):
                for l in range(0, n):
                    dct1 = matrix[k][l] * \
                           np.cos((2 * k + 1) * i * pi / (2 * m)) * \
                           np.cos((2 * l + 1) * j * pi / (2 * n))
                    s += dct1
            mdct[i][j] = ci * cj * s
    print(mdct)


if __name__ == "__main__":
    matrix = [
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
        [255, 255, 255, 255, 255, 255, 255, 255],
    ]

    dct_transform(matrix)
